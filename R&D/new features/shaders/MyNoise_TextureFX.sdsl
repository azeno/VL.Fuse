[TextureSource]
[Summary("Generates pixel noise from a value")]
shader MyNoise_TextureFX : TextureFX
{
	Texture2D colors;
	Texture2D gPos;
	Texture2D gNormal;
	float3 Eye;
	float3 Pos;
	float2 Aspect;
	float fov;


	float3x3 TBN(float3 N) {
    float3 Nb, Nt;
    if (abs(N.y) > 0.999) {
        Nb = float3(1.0, 0.0, 0.0);
        Nt = float3(0.0, 0.0, 1.0);
    } else {
        Nb = normalize(cross(N, float3(0.0, 1.0, 0.0)));
        Nt = normalize(cross(Nb, N));
    }
    return float3x3(Nb.x,Nt.x,N.x,Nb.y,Nt.y,N.y,Nb.z,Nt.z,N.z);
}

	float3 TBN(float3 N, out float3 O) {
		//Returns the simple tangent space directions
		if (abs(N.y)>0.999) {
			O = float3(1.,0.,0.);
			return float3(0.,0.,1.);
		} else {
			O = normalize(cross(N,float3(0.,1.,0.)));
			return normalize(cross(O,N));
		}
	}

	stage override float4 Shading()
	{
		float4 result = float4(0.0,0.0,0.0,0.0);

		float3 Tan; float3 Bit = TBN(Eye,Tan);
        float3x3 EyeMat = TBN(Eye);
		float3 Dir = normalize(mul(EyeMat, float3(((streams.TexCoord) * 2.0 - 1.0) * Aspect * fov, 1.0)));

		float3 PPos = gPos.SampleLevel(Sampler0,streams.TexCoord,0.0);
		float3 Normal = gNormal.SampleLevel(Sampler0,streams.TexCoord,0.0);

		//
        //Screen space horizons
        //
        result.xyz = float3(0.0,0.0,0.0);
		
    	float3 vNormal = float3(dot(Normal,Tan),dot(Normal,Bit),dot(Normal,Eye));
        float3 vPPos = float3(dot(PPos-Pos,Tan),dot(PPos-Pos,Bit),dot(PPos-Pos,Eye));
		return float4(vPPos * -1.0,1.0);//colors.SampleLevel(Sampler0,streams.TexCoord,0.0);
	}
};